iphoneDF$iphonesentiment= as.factor(iphoneDF$iphonesentiment)
inipDFTraining <- createDataPartition(iphoneDF$iphonesentiment, p = .70, list = FALSE)
ipDFtraining <- iphoneDF[inipDFTraining,]
ipDFtesting <- iphoneDF[-inipDFTraining,]
inipCORTraining <- createDataPartition(iphoneCOR$iphonesentiment, p = .70, list = FALSE)
ipCORtraining <- iphoneCOR[inipCORTraining,]
ipCORtesting <- iphoneCOR[-inipCORTraining,]
inipNZVTraining <- createDataPartition(iphoneNZV$iphonesentiment, p = .70, list = FALSE)
ipNZVtraining <- iphoneNZV[inipNZVTraining,]
ipNZVtesting <- iphoneNZV[-inipNZVTraining,]
inipRFETraining <- createDataPartition(iphoneRFE$iphonesentiment, p = .70, list = FALSE)
ipRFEtraining <- iphoneRFE[inipRFETraining,]
ipRFEtesting <- iphoneRFE[-inipRFETraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfDFFit1 <- train(iphonesentiment~., data = ipDFtraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfDFFit1
#train SVM model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
svmDFFit1 <- train(iphonesentiment~., data = ipDFtraining, method = "svmLinear", trControl=fitControl, tuneLength = 1)
svmDFFit1
#train knn model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
knnDFFit1 <- train(iphonesentiment~., data = ipDFtraining, method = "kknn", trControl=fitControl, tuneLength = 1)
knnDFFit1
#Picked Random Forest %76 accurancy Kappa 54%
rfCORFit1 <- train(iphonesentiment~., data = inipCORTraining, method = "rf", trControl=fitControl, tuneLength = 1)
inipCORTraining <- createDataPartition(iphoneCOR$iphonesentiment, p = .70, list = FALSE)
ipCORtraining <- iphoneCOR[inipCORTraining,]
ipCORtesting <- iphoneCOR[-inipCORTraining,]
#Picked Random Forest %76 accurancy Kappa 54%
rfCORFit1 <- train(iphonesentiment~., data = inipCORTraining, method = "rf", trControl=fitControl, tuneLength = 1)
str(iphoneCOR)
rfnzvFit1 <- train(iphonesentiment~., data = ipNZVtraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfnzvFit1
View(iphoneDF)
(iphoneCOR$iphonesentiment)
(iphoneCOR$iphonesentiment)
(iphoneCOR$iphonesentiment)
iphoneCOR$iphonesentiment= as.factor(iphoneCOR$iphonesentiment)
iphoneNZV$iphonesentiment= as.factor(iphoneNZV$iphonesentiment)
iphoneRFE$iphonesentiment= as.factor(iphoneRFE$iphonesentiment)
inipDFTraining <- createDataPartition(iphoneDF$iphonesentiment, p = .70, list = FALSE)
ipDFtraining <- iphoneDF[inipDFTraining,]
ipDFtesting <- iphoneDF[-inipDFTraining,]
inipCORTraining <- createDataPartition(iphoneCOR$iphonesentiment, p = .70, list = FALSE)
ipCORtraining <- iphoneCOR[inipCORTraining,]
ipCORtesting <- iphoneCOR[-inipCORTraining,]
inipNZVTraining <- createDataPartition(iphoneNZV$iphonesentiment, p = .70, list = FALSE)
ipNZVtraining <- iphoneNZV[inipNZVTraining,]
ipNZVtesting <- iphoneNZV[-inipNZVTraining,]
inipRFETraining <- createDataPartition(iphoneRFE$iphonesentiment, p = .70, list = FALSE)
ipRFEtraining <- iphoneRFE[inipRFETraining,]
#Picked Random Forest %76 accurancy Kappa 54%
rfCORFit1 <- train(iphonesentiment~., data = inipCORTraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfCORFit1
rfnzvFit1 <- train(iphonesentiment~., data = ipNZVtraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfnzvFit1
rfRFEFit1 <- train(iphonesentiment~., data = ipRFEtraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfRFEFit1
ippreRFEFrf<- predict(rfRFEFit1, newdata = ipRFEtesting)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
#Evaluation
postResample(ipprerf,ipDFtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
#Predictions
ippreRFEFrf<- predict(rfRFEFit1, newdata = ipRFEtesting)
ippreRFEFrf
#Picked RFE as data selcetion Accruacy 77% and 56% Kappa
varImp(knnDFFit1)
#Picked RFE as data selcetion Accruacy 77% and 56% Kappa
varImp(rfRFEFit1)
#Evaluation
postResample(rfRFEFit1,ipRFEtesting$iphonesentiment)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
str(ippreRFEFrf)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
str(ipRFEtesting)
rfRFEFit1
str(ippreRFEFrf)
#*********Iphone Large Matrix
iphoneDFL <- iphoneLargeMatrix
iphoneDFL<- iphoneDFL[c("iphone","googleandroid","iphonedispos","iphonedisneg","samsunggalaxy","htcphone","iphonedisunc","iphoneperpos","ios","iphoneperneg","sonyxperia","iphoneperunc","iphonecampos","iphonecamneg","iphonecamunc","htcdisunc","htccampos","htcperpos","iphonesentiment")]
iphonepredrfDFL<-predict(rfRFEFit1, newdata=iphoneDFL)
# Get results
str(rfeResults)
iphoneDFL<- iphoneDFL[c("iphone","googleandroid","iphonedispos","iphonedisneg","samsunggalaxy","htcphone","iphonedisunc","iphoneperpos","ios","iphoneperneg","sonyxperia","iphoneperunc","iphonecampos","iphonecamneg","iphonecamunc","htcdisunc","htccampos","htcperpos","htccamneg","iphonesentiment")]
#*********Iphone Large Matrix
iphoneDFL <- iphoneLargeMatrix
iphoneDFL<- iphoneDFL[c("iphone","googleandroid","iphonedispos","iphonedisneg","samsunggalaxy","htcphone","iphonedisunc","iphoneperpos","ios","iphoneperneg","sonyxperia","iphoneperunc","iphonecampos","iphonecamneg","iphonecamunc","htcdisunc","htccampos","htcperpos","htccamneg","iphonesentiment")]
iphonepredrfDFL<-predict(rfRFEFit1, newdata=iphoneDFL)
summary(iphonepredrfDFL)
str(iphonepredrfDFL)
plot_ly(iphonepredrfDFL, x= ~iphoneDF$iphonesentiment, type='histogram')
plot_ly(iphonepredrfDFL, x= ~iphonepredrfDFL$iphonesentiment, type='histogram')
rfRFEFit1
str(iphoneRFE)
str(ippreRFEFrf)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
iphonepredrfDFL<-predict(rfRFEFit1, newdata=iphoneDFL)
summary(iphonepredrfDFL)
str(iphonepredrfDFL)
plot_ly(iphonepredrfDFL, x= ~iphonepredrfDFL$iphonesentiment, type='histogram')
#*********************************************************************************************Galaxy
galaxyDF<-galaxy_smallmatrix_labeled_9d
#correlation
options(max.print = 1000000)
print(cor(galaxyDF))
df = cor(galaxyDF)
corrplot(df,tl.cex=0.6, assign.col="min2max",cl.ratio=0.4)
# Remove Highly correlated features
galaxyCOR <- galaxyDF
galaxyCOR$ios <- NULL
galaxyCOR$iphonecamneg <- NULL
galaxyCOR$iphonecamunc <- NULL
df = cor(galaxyCOR)
corrplot(df,tl.cex=0.6, assign.col="min2max",cl.ratio=0.4)
nzvgMetrics <- nearZeroVar(galaxyDF, saveMetrics = TRUE)
nzvgMetrics
# nearZeroVar() with saveMetrics = FALSE returns an vector
nzvg <- nearZeroVar(galaxyDF, saveMetrics = FALSE)
nzvg
# create a new data set and remove near zero variance features
galaxyNZV <- galaxyDF[,-nzvg]
str(galaxyNZV)
# Let's sample the data before using RFE
set.seed(123)
galaxySample <- galaxyDF[sample(1:nrow(galaxyDF), 1000, replace=FALSE),]
# Set up rfeControl with randomforest, repeated cross validation and no updates
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
# Use rfe and omit the response variable (attribute 59 iphonesentiment)
rfegResults <- rfe(galaxySample[,1:58],
galaxySample$galaxysentiment,
sizes=(1:58),
rfeControl=ctrl)
# Get results
str(rfegResults)
# Plot results
plot(rfegResults, type=c("g", "o"))
# create new data set with rfe recommended features
galaxyRFE <- galaxyDF[,predictors(rfegResults)]
# add the dependent variable to iphoneRFE
galaxyRFE$galaxysentiment <- galaxyDF$galaxysentiment
# review outcome
str(galaxyRFE)
# Plot results
plot(rfegResults, type=c("g", "o"))
# create new data set with rfe recommended features
galaxyRFE <- galaxyDF[,predictors(rfegResults)]
# add the dependent variable to iphoneRFE
galaxyRFE$galaxysentiment <- galaxyDF$galaxysentiment
# review outcome
str(galaxyRFE)
View(iphoneDF)
#Make the iphone sentiment as factor to do calssification
galaxyDF$iphonesentiment= as.factor(galaxyDF$iphonesentiment)
#Make the iphone sentiment as factor to do calssification
galaxyDF$galaxysentiment= as.factor(galaxyDF$galaxysentiment)
galaxyCOR$galaxysentiment= as.factor(galaxyCOR$galaxysentiment)
galaxyNZV$galaxysentiment= as.factor(galaxyNZV$galaxysentiment)
galaxyRFE$galaxysentiment= as.factor(galaxyRFE$galaxysentiment)
# define an 70%/30% train/test split of the dataset
ingalDFraining <- createDataPartition(galaxyDF$galaxysentiment, p = .70, list = FALSE)
galDFtraining <- galaxyDF[ingalDFraining,]
galDFtesting <- galaxyDF[-ingalDFraining,]
ingalCORTraining <- createDataPartition(galaxyCOR$galaxysentiment, p = .70, list = FALSE)
galCORtraining <- galaxyCOR[ingalCORTraining,]
galCORtesting <- galaxyCOR[-ingalCORTraining,]
ingalNZVTraining <- createDataPartition(galaxyNZV$galaxysentiment, p = .70, list = FALSE)
galNZVtraining <- galaxyNZV[ingalNZVTraining,]
galNZVtesting <- galaxyNZV[-ingalNZVTraining,]
ingalRFETraining <- createDataPartition(galaxyRFE$galaxysentiment, p = .70, list = FALSE)
galRFEtraining <- galaxyRFE[ingalRFETraining,]
galRFEtesting <- galaxyRFE[-ingalRFETraining,]
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfDFFit2 <- train(galaxysentiment~., data = galDFtraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfDFFit2
#train SVM model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
svmDFFit2 <- train(galaxysentiment~., data = galDFtraining, method = "svmLinear", trControl=fitControl, tuneLength = 1)
svmDFFit2
#train knn model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
knnDFFit2 <- train(galaxysentiment~., data = galDFtraining, method = "kknn", trControl=fitControl, tuneLength = 1)
knnDFFit2
galrfCORFit1 <- train(galaxysentiment~., data = galCORtraining, method = "rf", trControl=fitControl, tuneLength = 1)
galrfCORFit1
galrfnzvFit1 <- train(galaxysentiment~., data = galNZVtraining, method = "rf", trControl=fitControl, tuneLength = 1)
galrfnzvFit1
galrfRFEFit1 <- train(galaxysentiment~., data = galRFEtesting, method = "rf", trControl=fitControl, tuneLength = 1)
galrfRFEFit1
#Predictions
galpreRFEFrf<- predict(galrfnzvFit1, newdata = galNZVtesting)
galpreRFEFrf
str(galpreRFEFrf)
rfRFEFit1
ippreRFEFrf
str(ippreRFEFrf)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
ippreRFEFrf
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
#Predictions
ippreRFEFrf<- predict(rfRFEFit1, newdata = ipRFEtesting)
ippreRFEFrf
str(ippreRFEFrf)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
str(ipRFEtesting)
ipRFEtesting$iphonesentiment= as.factor(ipRFEtesting$iphonesentiment)
#Predictions
ippreRFEFrf<- predict(rfRFEFit1, newdata = ipRFEtesting)
ippreRFEFrf
str(ippreRFEFrf)
#Evaluation
postResample(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE <- confusionMatrix(ippreRFEFrf,ipRFEtesting$iphonesentiment)
cmRFE
galNZVtesting$galaxysentiment= as.factor(galNZVtesting$galaxysentiment)
#Predictions
galpreRFEFrf<- predict(galrfnzvFit1, newdata = galNZVtesting)
galpreRFEFrf
str(galpreRFEFrf)
#Evaluation
postResample(galpreRFEFrf,galNZVtesting$galaxysentiment)
cmnvz <- confusionMatrix(galpreRFEFrf,galNZVtesting$galaxysentiment)
cmnvz
str(galaxyNZV)
library(readr)
galaxyLargeMatrix <- read_csv("C:/Users/armin/OneDrive/Desktop/Data Analytics/T5/C5 T3/galaxyLargeMatrix.csv")
View(galaxyLargeMatrix)
#*********Iphone Large Matrix
galaxyDFL <- galaxyLargeMatrix
galaxyDFL<- galaxyDFL[c("iphone","samsunggalaxy","htcphone","iphonecampos","iphonecamunc","iphonedispos","iphonedisneg","iphonedisunc","iphoneperpos","iphoneperneg","iphoneperunc,"galaxysentiment")]
iphonepredrfDFL<-predict(rfRFEFit1, newdata=iphoneDFL)
summary(iphonepredrfDFL)
str(iphonepredrfDFL)
plot_ly(iphonepredrfDFL, x= ~iphonepredrfDFL$iphonesentiment, type='histogram')
#*********Iphone Large Matrix
galaxyDFL <- galaxyLargeMatrix
galaxyDFL<- galaxyDFL[c("iphone","samsunggalaxy","htcphone","iphonecampos","iphonecamunc","iphonedispos","iphonedisneg","iphonedisunc","iphoneperpos","iphoneperneg","iphoneperunc,"galaxysentiment")]
iphonepredrfDFL<-predict(rfRFEFit1, newdata=iphoneDFL)
summary(iphonepredrfDFL)
str(iphonepredrfDFL)
plot_ly(iphonepredrfDFL, x= ~iphonepredrfDFL$iphonesentiment, type='histogram')
galaxyDFL<- galaxyDFL[c("iphone","samsunggalaxy","htcphone","iphonecampos","iphonecamunc","iphonedispos","iphonedisneg","iphonedisunc","iphoneperpos","iphoneperneg","iphoneperunc","galaxysentiment")]
galaxypredrfDFL<-predict(galrfnzvFit1, newdata=galaxyDFL)
summary(galaxypredrfDFL)
str(galaxypredrfDFL)
plot_ly(galaxypredrfDFL, x= ~galaxypredrfDFL$galaxysentiment, type='histogram')
#Evaluation
postResample(galaxypredrfDFL,galaxyDFL$galaxysentiment)
cmLnvz <- confusionMatrix(galaxypredrfDFL,galaxyDFL$galaxysentiment)
galaxyDFL$galaxysentiment= as.factor(galaxyDFL$galaxysentiment)
#Evaluation
postResample(galaxypredrfDFL,galaxyDFL$galaxysentiment)
cmLnvz <- confusionMatrix(galaxypredrfDFL,galaxyDFL$galaxysentiment)
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
summary(iphoneDF)
library(ggplot2)
library(plotly)
library(corrplot)
library(caret)
library(e1071)
library(kknn)
head(iphoneDF)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
plot_ly(iphoneDF, x= ~iphoneDF$iphonesentiment, type='histogram')
#*********************************************************************************************Galaxy
galaxyDF<-galaxy_smallmatrix_labeled_9d
#correlation
options(max.print = 1000000)
print(cor(galaxyDF))
df = cor(galaxyDF)
corrplot(df,tl.cex=0.6, assign.col="min2max",cl.ratio=0.4)
plot_ly(galaxyDF, x= ~galaxyDF$galaxysentiment, type='histogram')
galpreRFEFrf
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- iphoneDF(COM = c("negative", "somewhat negative", "somewhat positive","positive"),
values = c(250, 150, 333, 400 ))
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- iphoneDF$iphonesentiment(COM = c("negative", "somewhat negative", "somewhat positive","positive"),
values = c(250, 150, 333, 400 ))
# create a data frame for plotting.
# you can add more sentiment levels if needed
# Replace sentiment values
pieData <- data.frame(COM = c("negative", "somewhat negative", "somewhat positive","positive"),
values = c(250, 150, 333, 400 ))
# create pie chart
textposition = 'inside',
insidetextfont = list(color = '#FFFFFF'),
text = ~paste( values),
hoverinfo = 'text',text = ~paste( values),marker = list(colors = colors,line = list(color = '#FFFFFF', width = 1)),showlegend = F) %>%
galpreRFEFrf
view(galpreRFEFrf)
view(iphoneDF)
library(view)
View(iphoneDF)
View(galpreRFEFrf)
galpreRFEFrf
ippreRFEFrf
write.csv(ippreRFEFrf), file="Armin to check",row.names=FALSE)
write.csv(ippreRFEFrf, file="Armin to check",row.names=FALSE)
# Replace sentiment values
pieData <- data.frame(ippreRFEFrf = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Neutra","Somewhat Positive","Very Positive"),
values = c(0,1,2,3,4,5 ))
# Replace sentiment values
pieData <- data.frame(COM = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Neutra","Somewhat Positive","Very Positive"),
values = c(0,1,2,3,4,5 ))
# Replace sentiment values
pieData <- data.frame(ippreRFEFrf = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Somewhat Positive","Very Positive"),
values = c(0,1,2,3,4,5 ))
#Predictions
ippreRFEFrf<- predict(rfRFEFit1, newdata = ipRFEtesting)
# Replace sentiment values
pieData <- data.frame(iphonepredrfDFL = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Somewhat Positive","Very Positive"),
values = c(0,1,2,3,4,5 ))
iphonepredrfDFL
pieData
# create pie chart
totalsplot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# create pie chart
totalsplot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# create pie chart
totalsplot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
# create pie chart
totalsplot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(totalsplot_ly)
library(dplyr)
# create pie chart
plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# create pie chart
plot_ly(pieData, labels = ~ippreRFEFrf, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
ippreRFEFrf
# Replace sentiment values
pieData <- data.frame(COM = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Somewhat Positive","Very Positive"),
values = c(0,1,2,3,4,5 ))
# create pie chart
plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Replace sentiment values
pieData <- data.frame(COM = ippreRFEFrf("Unclear", "Very negative", "Somewhat Negative ","Neutral","Somewhat Positive","Very Positive"),
values = ippreRFEFrf(0,1,2,3,4,5 ))
# create pie chart
plot_ly(ippreRFEFrf, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# create pie chart
plot_ly(pieData, labels = ~COM, values = ~ values, type = "pie",
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste( values),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = F) %>%
layout(title = 'iPhone Sentiment',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
# Replace sentiment values
pieData <- data.frame(COM = c("Unclear", "Very negative", "Somewhat Negative ","Neutral","Somewhat Positive","Very Positive"),
values = ippreRFEFrf)
pieData
iphoneDFL$iphonesentiment<-iphonepredrfDFL
iphoneDFL
str(iphoneDFL)
view(iphoneDFL)
View(iphoneDFL)
plot_ly(iphoneDFL, x= ~iphoneDF$iphonesentiment, type='histogram')
galaxyDFL$galaxysentiment<-galaxypredrfDFL
plot_ly(galaxyDFL, x= ~galaxyDF$galaxysentiment, type='histogram')
plot_ly(galaxyDFL, x= ~galaxyDFL$galaxysentiment, type='histogram')
plot_ly(iphoneDFL, x= ~iphoneDFL$iphonesentiment, type='histogram')
plot_ly(galaxyDFL, x= ~galaxyDFL$galaxysentiment, type='histogram')
rfDFFit1
svmDFFit1
knnDFFit1
rfCORFit1
#Picked Random Forest %76 accurancy Kappa 54%
rfCORFit1 <- train(iphonesentiment~., data = inipCORTraining, method = "rf", trControl=fitControl, tuneLength = 1)
rfRFEFit1
rfnzvFit1
rfCORFit1
rfDFFit2
svmDFFit2
knnDFFit2
galrfCORFit1
galrfCORFit1
galrfnzvFit1
galrfRFEFit1
galpreRFEFrf
#Evaluation
postResample(galpreRFEFrf,galNZVtesting$galaxysentiment)
cmnvz
# Stop Cluster. After performing your tasks, stop your cluster.
stopCluster(cl)
# Required
library(doParallel)
# Find how many cores are on your machine
detectCores() # Result = Typically 4 to 6
# Create Cluster with desired number of cores. Don't use them all! Your computer is running other processes.
cl <- makeCluster(4)
# Register Cluster
registerDoParallel(cl)
# Confirm how many cores are now "assigned" to R and RStudio
getDoParWorkers() # Result 2
# Stop Cluster. After performing your tasks, stop your cluster.
stopCluster(cl)
savehistory("C:/Users/armin/OneDrive/Desktop/Data Analytics/T5/C5 T3/C5 T3.Rhistory")
